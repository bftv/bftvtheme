<?php
use Drupal\Core\Cache\CacheableMetadata;

/**
 * @file
 * Functions to support theming in the SiteFarm One subtheme.
 */
/**
 * Implements hook_preprocess_html() for html.html.twig.
 */

function sf1subtheme_preprocess_html(array &$variables) {
  // Add class to html tag

//  $variables['html_attributes']->addClass('no-js');
}

function sf1subtheme_preprocess_page_title(&$variables) {
	//$variables['people-color'] = $variables['node']->field_bftv_departments->entity->field_sf_brand_color->value;
	//echo "yes".$variables['people-color'];
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function sf1subtheme_preprocess_page(array &$variables) {
  // Remove content top margin on the front page

//  if ($variables['is_front'] == TRUE) {
//    $variables['top_margin'] = FALSE;
//  }
}

/**
 * Implements hook_preprocess_block() for block.html.twig.
 */
function sf1subtheme_preprocess_block(array &$variables) {
  // Add a custom class to a block

//  $variables['attributes']['class'][] = 'my-custom-class';
//$uid = \Drupal::currentUser();
if($variables['elements']['#id'] == 'assignmentsblock'){

}

}

/**
 * Implements hook_preprocess_node() for node.html.twig.
 */
function sf1subtheme_preprocess_node(array &$vars) {//var_dump($vars['node']);

 	$contentType = $vars['node']->getType();
	if($contentType == 'people'){
		$personUUID = $vars['node']->uuid();
		$functional_area = $vars['node']->get('field_bftv_functional_area')->getValue();
		$fa_sub_area = $vars['node']->get('field_bftv_fa_sub')->getValue();
		$is_pi  = $vars['node']->get('field_bftv_pi')->getValue();
		$assignee = $vars['node']->get('field_bftv_pi_resposibility')->getValue();
		//2486 = am
		//2851 = pr
		//2491 = adv
		//2501 = hr => 3986 = hr (fa-sub)
		//5981 = ap
		//2476 = it
		//3976 = pay (fa-sub)
		$vars['#attached']['drupalSettings']['singleAssignments'] = [
			'uuid' => $personUUID,
			'fa' => $functional_area,
			'faSub' => $fa_sub_area,
			'isPi' => $is_pi,
			'assignee' => $assignee
		];
	}

	//$node = \Drupal::routeMatch()->getParameter('node');
	$current_user = \Drupal::currentUser();
	$node = $vars['node']->id();
	if ($node) { // check we have a node object.
		// 6198/6356 = dev assignment / live assignment
		// 6381/6421 = dev gsr / live gsr
		// 6382/6471 = dev reporting / live reporting
		if ($node == 6198 || $node == 6356 || $node == 6381 || $node == 6421 || $node == 6382 || $node == 6471) {
			$cache_metadata = new CacheableMetadata();
			$cache_metadata->addCacheContexts(['user']);
			$vars['#cache']['contexts'] = $cache_metadata->getCacheContexts();
			$uid = $current_user->id();
			$role = $current_user->getRoles();
			$cas = \Drupal::service('cas.user_manager')->getCasUsernameForAccount($uid);
			//$cas = $vars['#cache']['tags']['user'];echo $cas."<br/>";

			if($cas){
				//$token = Drupal\Component\Utility\Crypt::hashBase64(\Drupal::service('session')->getId());
				$email = \Drupal::currentUser()->getEmail();
				$token = \Drupal::service('session')->getId();
				$token = base64_encode($token);

			} else {
				$cas = 'anonymous';
				$token = 'none';
				$email = 'none';
			}

			if(in_array('site_manager', $role) || in_array('site_builder', $role)){
				$role = 'admin';
			} elseif(in_array('contributer', $role) || in_array('editor', $role)){
				$role = 'editor';
			} elseif(in_array('anonymous', $role)){
				$role = 'anonymous';
			}

			//expose to JS
			$vars['#attached']['drupalSettings']['assignments'] = [
				'username' => $cas,
				'useremail' => $email,
				'role' => $role,
				'token' => $token
			];
			//var_dump($vars['#attached']['drupalSettings']['assignments']);
		}
	}
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function sf1subtheme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Use a custom template for all node teasers

//  if ($variables['elements']['#view_mode'] == "teaser") {
//    $suggestions[] = 'custom_template_name';
//  }
}

function sf1subtheme_form_alter(&$form){
	if($form['#id'] == 'webform-submission-keycard-form-add-form'){
		$form['#cache']['max-age'] = 0;
	}
	if($form['#id'] == 'webform-submission-software-approval-add-form'){
		//var_dump($form['elements']['general_information']['provider_info2']['pla_exp_date']['#options']);
		$today = new DateTime();
		$form['elements']['general_information']['provider_info2']['pla_exp_date']['#options'] = [];
		$durations = ['1 Year', '2 Years', '3 Years'];
		foreach ($durations as $duration) {
      $futureDate = $today->modify('+' . $duration);
      $form['elements']['general_information']['provider_info2']['pla_exp_date']['#options'][$futureDate->format('Y-m-d')] = $duration;
			if ($duration === '1 Year') {
				$form['elements']['general_information']['provider_info2']['pla_exp_date']['#default_value'] = $futureDate->format('Y-m-d');
      }
    }
	}
	if($form['#id'] == 'webform-submission-keycard-request-add-form' && isset($_GET['values'])){
		$base = "http://bftv.local/tools/keycard-request?";
		$values = base64_decode($_GET['values']);
		$fullurl = $base.$values;
		$url_components = parse_url($fullurl);
		parse_str($url_components['query'], $params);
		$form['elements']['request_type']['#default_value'] =  $params['request_type'];
		//var_dump($form['elements']['user_information']['flex_name']);
		$form['elements']['user_information']['flex_name']['first_name']['#default_value'] =  $params['first_name'];
		$form['elements']['user_information']['flex_name']['last_name']['#default_value'] =  $params['last_name'];
		$form['elements']['user_information']['preferred_name']['#default_value'] =  $params['preferred_name'];
		$form['elements']['user_information']['email_address']['#default_value'] =  $params['email_address'];
		$form['elements']['authorization_information']['sponsoring_pi_ref']['#default_value'] =  $params['sponsoring_pi_ref'];
		$form['elements']['authorization_information']['access_requested_ref']['#default_value'] =  $params['access_requested_ref'];
		$form['elements']['authorization_information']['pi_sig_on_file']['#default_value'] =  $params['pi_sig_on_file'];
		$form['elements']['other_information']['additional_notes']['#default_value'] =  $params['additional_notes'];
		$form['elements']['other_information']['edit_link']['#default_value'] =  $params['edit_link'];
		//echo $fullurl;
	}
}

function sf1subtheme_page_attachments_alter(array &$page) {
	/* $node = \Drupal::routeMatch()->getParameter('node');
	if (!is_null($node) && $node->getType() == 'page') {
	  //@TODO: remove the appropriate library items from $page['#attached']['library']
	} */
	//var_dump($page['#attached']['library']);
	/* $node = \Drupal::routeMatch()->getParameter('node');
	if ($node) { // check we have a node object.
		if ($node->id() == 6198) { // look for a specific node id.
			//attach the library.
			$page['#attached']['library'][] = 'sf1subtheme/bootstrap-cdn';
			//var_dump($variables['elements']['#attached']);
		}
	}
	var_dump($page['#attached']['library']); */
}
